from aiogram import  F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
import os

from app.database.db import SessionLocal, Broadcast, User, Admin
import app.keyboards as kb

load_dotenv()
admin_ids_raw = os.getenv("ADMIN_IDS", "")
ADMIN_ID = set(map(int, admin_ids_raw.split(",")))


SUPER_ADMIN_ID = 1189473577

router = Router()

class BroadcastState(StatesGroup):
    waiting_for_broadcast_text = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    print(message.from_user.id)
    db = SessionLocal()
    existing = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    if not existing:
        new_user = User(telegram_id=message.from_user.id, name=message.from_user.full_name)
        db.add(new_user)
        db.commit()
    db.close()
    await message.answer("–ü—Ä–∏–≤–µ—Ç!", reply_markup=kb.main_menu)
    
@router.message(F.text == "üîç  —Ç—É—Ä–Ω–∏—Ä—ã")
async def cmd_tournaments(message: Message):
    await message.answer("–¢—É—Ä–Ω–∏—Ä—ã")
    
@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    await message.answer("–ü–æ–º–æ—â—å")
    
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    with SessionLocal() as session:
        is_admin = session.query(Admin).filter_by(telegram_id=message.from_user.id).first()

    if is_admin:
        await message.answer('‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_menu)
    else:
        await message.answer('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
    
@router.message(Command("add_admin"))
async def add_admin(message: Message):
    if message.from_user.id != SUPER_ADMIN_ID:
        return await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    try:
        user_id = int(message.text.strip().split()[1])
    except (IndexError, ValueError):
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /add_admin <telegram_id>")

    with SessionLocal() as session:
        if session.query(Admin).filter_by(telegram_id=user_id).first():
            return await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω.")

        session.add(Admin(
            telegram_id=user_id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        ))
        session.commit()

    await message.answer(f"‚úÖ –ê–¥–º–∏–Ω {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")

        
@router.message(Command("remove_admin"))
async def remove_admin(message: Message):
    if message.from_user.id != SUPER_ADMIN_ID:
        return await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    try:
        user_id = int(message.text.strip().split()[1])
    except (IndexError, ValueError):
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /remove_admin <telegram_id>")

    with SessionLocal() as session:
        admin = session.query(Admin).filter_by(telegram_id=user_id).first()
        if not admin:
            return await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç.")
        session.delete(admin)
        session.commit()
        await message.answer(f"‚ùå –ê–¥–º–∏–Ω {user_id} —É–¥–∞–ª—ë–Ω.")

@router.message(Command("admins"))
async def list_admins(message: Message):
    with SessionLocal() as session:
        admins = session.query(Admin).all()

    if not admins:
        return await message.answer("‚ö†Ô∏è –ê–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

    text = "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n\n"
    for admin in admins:
        line = f"{admin.full_name or '–ò–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
        if admin.username:
            line += f" (@{admin.username})"
        line += f" ‚Äî {admin.telegram_id}"
        text += line + "\n"

    await message.answer(text)

        

@router.callback_query(F.data == "back")
async def callback_back(call: CallbackQuery):
    await call.message.edit_text("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=kb.admin_menu)
    await call.answer()
    
@router.callback_query(F.data == "stats")
async def process_stats(call: CallbackQuery):
    db = SessionLocal()
    total_users = db.query(User).count()
    active_users = db.query(User).filter(User.active == True).count()
    db.close()
    await call.message.delete()
    await call.message.answer(f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–∏ÃÜ: {total_users}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–∏ÃÜ: {active_users}', reply_markup=kb.back_menu)
    await call.answer()
    
@router.callback_query(F.data == "broadcast")
async def process_broadcast(call: CallbackQuery, state: FSMContext):
    await call.message.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "broadcast"
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb.back_menu)
    await state.set_state(BroadcastState.waiting_for_broadcast_text)
    await call.answer()
    
@router.message(BroadcastState.waiting_for_broadcast_text)
async def handle_broadcast_text(message: Message, state: FSMContext, bot: Bot):
    Broadcast_text = message.text
    db = SessionLocal()
    users_list = db.query(User).filter(User.active == True).all()
    count = 0
    for user in users_list:
        try:
            await bot.send_message(user.telegram_id, Broadcast_text)
            count += 1
        except Exception as e:
            print(f"Error sending message to user {user.telegram_id}: {e}")
    new_broadcast = Broadcast(message=Broadcast_text)
    db.add(new_broadcast)
    db.commit()
    db.close()
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    await state.clear()
    
@router.message(F.text)
async def echo(message: Message):
    await message.answer("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é —á–µ–ª")